{"version":3,"sources":["App.js","components/Name.js","components/From.js","components/Palettes.js","components/Card.js","serviceWorker.js","index.js"],"names":["datos","Name","react_default","a","createElement","this","props","name","React","Component","From","from","Palettes","colors","console","log","className","map","color","style","backgroundColor","concat","Card","dato","ind","components_Name","index","components_From","components_Palettes","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","state","_this2","fetch","then","res","json","data","setState","palettes","components_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8IAIIA,6ECSWC,0LARP,OACIC,EAAAC,EAAAC,cAAA,UAAKC,KAAKC,MAAMC,aAJTC,IAAMC,YCcVC,mLAZP,OAEIR,EAAAC,EAAAC,cAAA,UAAKC,KAAKC,MAAMK,aAJTH,IAAMC,WCiBVG,mLAfP,IAAMC,EAASR,KAAKC,MAAMO,OAE1B,OADAC,QAAQC,IAAIF,GAERX,EAAAC,EAAAC,cAAA,OAAKY,UAAU,WACjBH,EAAOI,IAAI,SAAAC,GAAK,OACVhB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,SAASG,MAAO,CAAEC,gBAAe,IAAAC,OAAMH,KAAtD,IAAAG,OAAsEH,cAR/DV,IAAMC,WC2Bda,mLApBP,OADgBjB,KAAKC,MAAdN,MAEGiB,IAAI,SAACM,EAAKC,GAAN,OACNtB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACqB,EAAD,CAAMlB,KAAQgB,EAAKhB,KAAMmB,MAASF,IAClCtB,EAAAC,EAAAC,cAACuB,EAAD,CAAMhB,KAAOY,EAAKZ,OAClBT,EAAAC,EAAAC,cAACwB,EAAD,CAAUf,OAASU,EAAKV,mBATvBJ,aJgCJoB,cA9Bb,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAwB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9B,KAAMC,KACD8B,UACLN,EAAKO,MAAQ,CACXrC,MAAO,IAJQ8B,yEAQT,IAAAQ,EAAAjC,KACRkC,MAAM,yGACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIL,EAAKM,SAAS,CAC1B5C,MAAO2C,EAAKE,8CAShB,OADA7C,EAAQK,KAAKgC,MAAMrC,MAEjBE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC0C,EAAD,CAAM9C,MAASA,YAxBLQ,IAAMC,WKOJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.0786f553.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Card from './components/Card'\n\nlet datos;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getData();\n    this.state = {\n      datos: [],\n    }\n\n  }\n  getData() {\n    fetch('https://raw.githubusercontent.com/Adalab/Easley-ejercicios-de-fin-de-semana/master/data/palettes.json')\n      .then(res => res.json())\n      .then(data => this.setState({\n        datos: data.palettes,\n\n      }));\n\n\n  }\n\n  render() {\n    datos = this.state.datos;\n    return (\n      <ul>\n        <Card datos = {datos}/>\n      </ul>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\n\nclass Name extends React.Component{\n    render(){\n        //console.log(this.props);\n        return(\n            <h1>{this.props.name}</h1>\n        );\n    }\n}\n\n\n\nexport default Name;","import React from 'react';\n\nclass From extends React.Component{\n    render(){\n        return(\n\n            <h2>{this.props.from}</h2> \n        );\n    }\n\n\n}\n\n\n\n\nexport default From;","import React from 'react';\nclass Palettes extends React.Component{\n    render(){\n       \n        const colors = this.props.colors;\n        console.log(colors);\n        return(\n            <div className=\"Palette\">\n         {colors.map(color =>\n                <div className=\"Square\" style={{ backgroundColor: `#${color}` }}>{`#${color}`}</div>)}\n                </div>\n        );\n    }\n\n\n}\n\n\n\nexport default Palettes;","import React, {Component} from 'react';\nimport Name from './Name';\nimport From from './From';\nimport Palettes from './Palettes';\nclass Card extends Component{\n    render(){\n        \n        const {datos} = this.props;\n        return(\n            datos.map((dato,ind) =>\n                <li >\n                  <Name name = {dato.name} index = {ind}/>\n                  <From from ={dato.from}/>\n                  <Palettes colors ={dato.colors}/>\n                  </li>\n      \n             )\n             \n        );\n    }\n\n\n\n}\n\n\n\n\nexport default Card;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}